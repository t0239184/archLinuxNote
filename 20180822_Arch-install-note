###=============================================
###=                ARCH-INSTALL               =
###=============================================

## Create Live USB
Use DD for Mac,Linux

# Mac
$ diskUtil list                    //列出所有的磁碟
$ diskUtil unmountDisk [usbDisk]   //卸載磁碟

[製作USB]
$ dd bs=4m if=[isoFile] for=[usbDisk]

[檢查開機模式]
efivar -l         //如果為錯誤訊息則為BIOS啟動非EFI

[硬碟分割]
$ lsblk           //檢查目前硬碟分割情況
$ cgdisk /dev/sda //GPT分割表用cgdisk分割

BOOT:200M   -> sda2
ROOT:20G    -> sda4
SWAP:24G    -> sda3
OPT :5G     -> sda5
TMP :1G     -> sda6
USR :10G    -> sda7
VAR :5G     -> sda8
HOME:512G   -> sda9

$ lsblk           //檢查目前硬碟分割情況

[初始化分割區]
$ mkfs.fat -F32 /dev/sda2  //EFI
$ mkswap /dev/sda3         //SWAP

$ mkfs.ext4 /dev/sda4
$ mkfs.ext4 /dev/sda5
$ mkfs.ext4 /dev/sda6
$ mkfs.ext4 /dev/sda7
$ mkfs.ext4 /dev/sda8
$ mkfs.ext4 /dev/sda9

[掛載分割區]
$ mkdir /mnt/home /mnt/boot/ /mnt/boot/efi
$ mount /dev/sda4 /mnt                                //掛載ROOT至/mnt
$ mount /dev/sda9 /mnt/home                           //掛載HOME至/mnt/home
$ mount /dev/sda2 /mnt/boot/efi                       //(EFI)掛載BOOT至/mnt/boot/efi
$ mount /dev/sda2 /mnt/boot                           //(BIOS)掛載BOOT至/mnt/boot/
$ swapon /dev/sda3                                    //啟用SWAP


[無線網路2]
$ ip link                                             //顯示網路介面
$ ip link set [interface] up                          //啟用介面
$ iw [interface] link                                 //確認無線裝置連線狀態
$ iw [interface] scan | grep SSID                     //掃描WIFI訊號，只顯示SSID
$ wpa_passphrase [WIFI-SSID] >> /tmp/wifi.conf        //連線到WPA/WPA2加密的無線網路，會等待使用者輸入密碼
$ cat /tmp/wifi.conf                                  //印出上面產生的檔案內容
$ wpa_supplicant -B -i [interface] -c /tmp/wifi.conf  //連線
$ iw [interface] link                                 //確認無線裝置連線狀態
$ dhclient wlan0                                      //要求DHCP伺服器配發動態IP
$ ping -c 3 8.8.8.8                                   //測試連線

[有線網路]
$ ip link set [interface] up                          //啟用介面
$ dhcpcd [interface]                                  //要求DHCP伺服器配發動態IP

[USB手機網路]
$ ip link set [interface] up
$ dhcpcd [interface]



[鏡像清單]
$ cp mirrorlist mirrorlist.backup                     //備份鏡像清單
$ rankmirrors -n 6 mirrorlist.backup > mirrorlist.    //讓系統測試鏡像速度，按速度排序鏡像，此步驟需要一些時間

[修改預設編輯器]


[Pacman設定]
$ cp /etc/pacman.conf /etc/pacman.conf.backup.        //備份設定檔
$ sed -id 's/#Color/Color/g' /etc/pacman.conf。       //開啟色彩
$ echo -e "[ArchLinuxfr]\nSigLevel = Optional TrustAll\nServer = http://repo.ArchLinux.fr/$arch" >> /etc/pacman.conf  ////Pacman新增Reporsitory


[更新系統]
pacman -Syy

[安裝套件]
pacstrap /mnt

base base-devel intel-ucode
zsh vim rsync htop
wget git openssh networkmanager dialog iw dhclient wpa_passphrase wpa_supplicant
pythod noto-fonts noto-fonts-cjk yaourt



[設定系統]
$ genfstab -U /mnt | sed -e 's/relatime/noatime/g' >> /mnt/etc/fstab   //開機時的設定檔，開機時會依這個檔案的內容掛載檔案系統。
$ blkid                                                                //顯示各磁碟資訊
$ vim /mnt/etc/fstab                                                   //確認UUID是否正確（和 blkid 比對）

[進入掛載系統]
$ arch-chroot /mnt /bin/bash

[設定語系]
$ sed -i -e 's/^#\(en_US\|zh_TW\)\(\.UTF-8\)/\1\2/g' /etc/locale.gen     //en_US.UTF-8 和 zh_TW.UTF-8 的註解拿掉
$ locale-gen
$ echo "LANG=en_US.UTF-8" > /etc/locale.conf

[設定時間]
$ export TIMEZONE=Asia/Taipei
$ ln -sf /usr/share/zoneinfo/${TIMEZONE} /etc/localtime
$ hwclock --systohc
$ systemctl enable systemd-timesyncd

[設定電腦名稱]
$ export HOSTNAME=<hostname>
$ echo $HOSTNAME > /etc/hostname
$ sed -ie "8i 127.0.1.1\t$HOSTNAME.localdomain\t$HOSTNAME" /etc/hosts

[設定啟動程式]（systemctl）
$ systemctl enable fstrim.timer                                         //有SSD才需要，啟用每週執行 fstrim
$ systemctl enable NetworkManager

$ systemctl enable dhcpcd                                               //啟動dhcp網路
$ systemctl enable NetworkManager
$ systemctl start NetworkManager

[建立開機映像]
Creates an initial ramdisk environment for booting the linux kernel.

$ vim /etc/mkinitcpio.conf                                              //(optional) 看有沒有要修改
$ mkinitcpio -p linux


以下有常用的開機模式為GRUB和rEFind
--------------------------------------------------------------------------------------------
[GRUB]
$ pacman -S grub os-prober efibootmgr
$ grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=arch --recheck
$ grub-mkconfig -o /boot/grub/grub.cfg                                  //建立grub開機設定檔
--------------------------------------------------------------------------------------------
[rEFind]
$ pacman -S refind-efi
$ refind-install
$ vim /boot/refind_linux.conf                                             //設定配置文件/boot/refind_linux.conf内核参数

===============================
/boot/refind_linux.conf
===============================
>>"Boot with standard options"  "root=UUID=<your uuid of root partition> rw quiet acpi_rev_override=1 initrd=/boot/initramfs-linux.img initrd=/boot/intel-ucode.img enable_psr=1 disable_power_well=0 nvme_core.default_ps_max_latency_us=130000"
>>"Boot to single-user mode"    "root=UUID=<your uuid of root partition> rw quiet acpi_rev_override=1 single"
>>"Boot with minimal options"   "ro root=/dev/<your root partition name>"


--------------------------------------------------------------------------------------------

[建立使用者]
$ sed -ie 's/# \(%wheel ALL=(ALL) ALL\)/\1/' /etc/sudoers
$ export USERNAME=<username>
# 加上 -m 參數才會建立使用者家目錄以及 .bash 相關檔案
$ useradd -mG wheel,storage,power,video,audio $USERNAME
$ passwd $USERNAME # 設定密碼



$ exit
$ reboot

双系统直接进windows的话，请在windows下使用easyuefi禁用windows boot manager

[安裝桌面系統]
$ pacman -S gnome gnome-extra




$ pacman -S xorg-xinit xorg-server xorg-xclock xterm xorg-twm
$ vim /etc/X11/xinit/xinitrc

/etc/X11/xinit/xinitrc                                                  //文件最后有这样一段,删掉或者注释掉这些内容
=============================================
#twm &
#xclock -geometry 50x50-1+1 &
#xterm -geometry 80x50+494+51 &
#xterm -geometry 80x20+494-0 &
#exec xterm -geometry 80x66+0+0 -name login

exec gnome-session                                                      //如果你使用的是gnome桌面，添加上這行
=============================================

cp /etc/X11/xinit/xinitrc ~/.xinitrc           //可以使用別的身份登入，為用户複製一份單獨的配置文件，開啟個別的桌面系統


$ startx



[安裝登入管理器]
$ pacman -S gdm
$ sed -ie 's/#\(WaylandEnable\)/\1/' /etc/gdm/custom.conf

[自動開啟]
$ systemctl enable gdm                                                  //設定gdm開機自動啟動載入gnome桌面
[手動開啟]
$ systemctl start gdm                                                   //手動開啟gdm




$ pacman -S firefox sakura
sudo pacman -S ntfs-3g dosfstools. //要支持制作fat文件系统，安装dosfstools，默认内核只能读取ntfs，要支持ntfs读写，安装ntfs-3g。

[安裝驅動]
pacman -S xf86-input-synaptics   //觸控板驅動


首先是alsa這是一個音頻控件：
$ sudo pacman -S alsa-utils



[YAOURT]
$ sudo pacman -S --needed base-devel git wget yajl
$ cd /tmp
$ git clone https://aur.archlinux.org/package-query.git
$ cd package-query/
$ makepkg -si && cd /tmp/
$ git clone https://aur.archlinux.org/yaourt.git
$ cd yaourt/
$ makepkg -si


[將資料夾名稱改成英文]
$ sudo vim .config/user-dirs.dirs

pacman -S gnome-packagekit




$ sudo pacman -S sublime-text-dev
无法输入中文的解决方案——下载必要的文件并复制到相应的目录：
$ git clone https://github.com/lyfeyaj/sublime-text-imfix.git
$ cd sublime-text-imfix
$ sudo cp ./lib/libsublime-imfix.so /opt/sublime_text/
$ sudo cp ./src/subl /usr/bin/
在～下新建文件名为sublime
$ vim sublime
<== 添加
#!/bin/bash
LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so subl
重新运行 sublime 就可以输入中文了
$ bash ~/sublime
以后都要用上面这条语句运行sublime


$ sudo pacman -S chromium
为 chromium 安装 flash 插件
$ sudo yaourt -S pepper-flash
$ sudo yaourt -S chromium-widevine


用 pacman 安装软件包 virtualbox：
$ sudo pacman -S virtualbox
选择 linux 内核模块获取方式，安装 virtualbox-host-modules-arch：
$ sudo pacman -S virtualbox-host-modules-arch
要使用基于 Qt 的图形界面：
$ sudo pacman -S qt5-x11extras
VirtualBox 在 Linux 上运行需要使用自己的内核模块，vboxdrv 模块必须在虚拟机运行前加载。
手动加载模块：
$sudo modprobe vboxdrv
运行　VirtualBox。

优化 vbox 体验：
装完 xp 虚拟机后，发现没有适应屏幕的分辨率，并且鼠标移动迟钝，baidu 后才知道是因为还没安装增强软件包～

step1：添加留空光驱
（１）关闭虚拟机，回到 VirtualBox 管理器中，然后选中你创建的虚拟机，右击点 setting。
（２）在弹出的虚拟机设置中，在左侧列表中找到 storage 选项。
（３）在右边存储树列表中，点击添加虚拟光驱。如图：红线圈中，光驱选择留空就行了。

step2：安装增强软件包
打开虚拟机，点击 Device -> Insert Guest Additions CD image。
vBox 会自动将增强包挂载到虚拟机的光驱上，双击安装即可。

step3：添加共享文件夹
这个很简单。创建完共享文件夹后，虚拟机 xp 端通过 我的电脑 -> 映射网络驱动器 进行访问。





sudo yaourt -S wps-office




1 关联github
1.1 设置git
系统中 git 已默认安装，设置 git 用户名称和邮件地址：

$ git config --global user.name "username"
$ git config --global user.email "username@example.com"
1.2 配置git私钥
安装 openssh

$ sudo pacman -S openssh
生成 SSH key

$ ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
首先确保 ssh-agent 可运行：

$ ssh-agent -s
然后添加SSH key：

$ ssh-add ~/.ssh/id_rsa
拷贝 ~/.ssh/id_rsa.pub 中的内容，然后，在 GitHub 右上方点击头像，选择 ”Settings”，在右边的 ”Personal settings” 侧边栏选择 ”SSH Keys”。点击 ”Add key” 按钮添加，接着粘贴 key。


1.2 archlinux 有線網路自動連線
同样是连接动态分配 ip 的路由器，命令行如下：

$ sudo ip link set enp7s0 up
$ sudo dhcpcd enp7s0
每次开机都要手动输入很不方便，那就加入开机自启吧!

新建 rc-local.service

$ sudo vim /usr/lib/systemd/system/rc-local.service
写入以下内容：

[Unit]
Description=/etc/rc.local Compatibility
ConditionPathExists=/etc/rc.local
[Service]
Type=forking
ExecStart=/etc/rc.local
TimeoutSec=0
StandardOutput=tty
RemainAfterExit=yes
SysVStartPriority=99
[Install]
WantedBy=multi-user.target
然后新建 rc.local

$ sudo vim /etc/rc.local
写入：

#!/bin/bash
ip link set enp7s0 up
dhcpcd enp7s0
保存之后将其权限设置为可执行

$ sudo chmod +x /etc/rc.local
最后使用systemctl开机自启动此service

$ sudo systemctl enable rc-local.service
重启后发现能自动连网了！

[觸控板多手勢]
sudo pacman -S xf86-input-libinput
cp /usr/share/X11/xorg.conf.d/40-libinput.conf /etc/X11/xorg.conf.d/30-touchpad.conf
# 配置触控板，/usr/share中的为默认配置，/etc/中的用户自定义配置

sudo vim /etc/X11/xorg.conf.d/30-touchpad.conf
# 触控板配置内容如下：
Section "InputClass"
        Identifier "libinput touchpad catchall"
        MatchIsTouchpad "on"
        MatchDevicePath "/dev/input/event*"
        Driver "libinput"
        Option "Tapping" "on"
        Option "TapButton1" "1"
        Option "TapButton2" "3"
        Option "TapButton3" "2"
        Option "VertEdgeScroll" "on"
        Option "VertTwoFingerScroll" "on"
        Option "HorizEdgeScroll" "on"
        Option "HorizTwoFingerScroll" "on"
        Option "NaturalScrolling" "on"
EndSection

[美化]
yaourt -S numix-circle-icon-theme-git    //icon
yaourt -S gtk-theme-arc-git              //gtk主题
gnome-shell主题
首先在gnome-tweak-tool里的拓展里启用User themes

然后安装主题，这里我是用的贴吧的@Air_Wawei的Air主题，并自己做了些修改。

首先下载主题 然后解压，将Air文件夹放到/usr/share/themes/文件夹里，在gnome-tweak-tool里启用主题



[gdm背景]
输入以下指令

curl -L -O http://archibold.io/sh/archibold
chmod +x archibold
./archibold login-backgroung 你的背景的地址
重启后gdm就会变成你要的背景


dash-to-dock


[Arch禁用nvidia独显]
双显卡的笔记本通常都是用的i卡，n卡都是通着电而不用的，除非你使用了 bumblebee ，否则这颗核弹会一直通电，大大减少待机时间。最好的办法是禁用N卡，不让他通电。然而很多bios是不支持禁用N卡的，或者你还想在windows上使用N卡，这时候怎么办呢？

bbswitch 可以帮助你禁用N卡，首先安装 bbswitch

sudo pacman -S bbswitch dkms
然后设施 bbswitch 开机自动加载：

sudo echo "bbswitch" >> /etc/modules-load.d/modules.conf
设置 bbswitch 启动参数并禁用nouveau

sudo echo "options bbswitch load_state=0" >> /etc/modprobe.d/bbswitch.conf
sudo echo "blacklist nouveau" >> /etc/modprobe.d/nouveau_blacklist.conf
然后重建 initrd

mkinitcpio -p linux
其他发行版可能是 mkinitrd命令

执行完成后重启电脑。

执行 lspci 或 lspci | grep NVIDIA 查看效果，如果N卡后面显示 (rev ff) ，表明已经成功禁用。



sudo pacman -S adobe-source-han-sans-cn-fonts
sudo pacman -S xorg-xinput  //实时配置触板的命令行工具
cp /etc/X11/xinit/xintrc ~/.xinitrc.    //# 桌面环境配置文件



对了, 默认配置没有启用轻触, 啪啪啪的按触摸板这也是不能接受的.
首先查看输入设备列表, 得知触摸板设备 ID 是 12:
$ xinput list                                     //列出所有輸入設備 尋找touchpad
$ xinput list-props [driveId]

Device 'SynPS/2 Synaptics TouchPad':
        Device Enabled (139):   1
        Coordinate Transformation Matrix (141): 1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000
        libinput Tapping Enabled (274): 0
        libinput Tapping Enabled Default (275): 0
        libinput Tapping Drag Enabled (276):    1
        ...
        ...

$ xinput set-prop 12[driveId] 274[propertiesId] 1[value]

可能會編號會改變，所以可以用下面字串的方式變更
$ xinput set-prop --type=int --format=8 "SynPS/2 Synaptics TouchPad" "libinput Tapping Enabled" 1







裝機案例：ASUS X550V
錯誤問題：解決lspci timeout error
錯誤訊息：lspci timeout
解決方法：Disable Nvidia driver : Choosing arch from the ISO boot menu hit 'e' and add 'modprobe.blacklist=nouveau' to the kernal parameters
參考相關：
ArchLinux将nvidia driver替换成开源的nouveau解决显卡驱动问题 http://gccpacman.com/2015/11/07/replace-nvidia-driver-with-nouveau-driver-arch-linux
NVIDIA (简体中文) https://wiki.archlinux.org/index.php/NVIDIA_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)

錯誤問題：pcieport / RTL8821AE錯誤
錯誤訊息：error msg loop
----------------------------------------------------------------------------------------------------------------------
00:1c.5 PCI bridge: Intel Corporation Sunrise Point-LP PCI Express Root Port #6 (rev f1) (prog-if 00 [Normal decode])
    Flags: bus master, fast devsel, latency 0, IRQ 124
    Bus: primary=00, secondary=03, subordinate=03, sec-latency=0
----------------------------------------------------------------------------------------------------------------------
解決方法：Choosing arch from the ISO boot menu hit 'e' and add 'pci=nomsi' to the kernal parameters


錯誤問題：開機時有出現一行錯誤訊息
錯誤訊息：Failed to start Load Kernel Modules
$ systemctl status systemd-modules-load.service
...
Failed to find module 'option bbswitch load_state=0'
...







remove list
====================
gnome-documents
gnome-klotski
gnome-mahjongg
gnome-mines
gnome-music
gnome-robots
gnome-screenshot
gnome-sound-recorder
gnome-taquin
gnome-tetravex

install list
=====================
gnome-power-manager
--laptop-mode-tools   /etc/laptop-mode/laptop-mode.conf
tlp                 /etc/default/tlp  sudo tlp stat
sudo systemctl enable tlp.service
https://itw01.com/MSCQE8K.html
psensor
gnome-shell-extension-cpufreq-git
ntfs-3g //可以擁有寫入 NTFS 磁區的功能
wine
albert
virtualbox
bbswitch
bumblebee
ttf-liberation
ttf-droid
jdk8-openjdk
echo "export JAVA_HOME=\"$(pwd)\"" >> ~/.zshrc
echo 'export PATH=\"$JAVA_HOME/bin/:$PATH\"' >> ~/.zshrc
source ~/.zshrc


Arch下使用bbswitch彻底禁用双显卡笔记本的独立显卡
https://xuchen.wang/archives/archbbswitch.html


https://github.com/daringer/asus-fan
https://hant.helplib.com/GitHub/article_117722


https://github.com/alim0x/Awesome-Linux-Software-zh_CN

优化系统启动速度

Arch Linux 的 systemd-analyze 是个很不错的工具，利用它你可以很直观地观察到系统启动的时间都花到哪儿去了：

$ systemd-analyze
Startup finished in 6.857s (firmware) + 3.157s (loader) + 1.870s (kernel) + 8.157s (userspace) = 20.044s

我注意到打开 AHCI 后，内核和用户空间的载入速度明显提高了，总启动时间从约 30 秒缩短到 20 秒，效果非常明显。

用下面这个命令，可以了解到是什么东西启动最慢：

$ systemd-analyze blame

此外，还可以把启动过程绘制成 SVG 图表供你审阅（用 GNOME 的图片预览或 Chrome 浏览器都可以打开），这个图表中你还可以观察到是否有启动慢的组件影响到了依赖它的组件的启动：

$ systemd-analyze plot > plot.svg


----------------------------
SATA 启用 AHCI 模式

SATA 有两种工作模式：原生的 AHCI 模式提供更好的性能（如热插拔和 NCQ 支持）、模拟的 IDE 模式提供更好的兼容性。一般主板出厂默认将 SATA 模式设置为 IDE 模式，但如今先进的 Linux 和 Windows 都早已原生支持 AHCI，所以我们最好打开 AHCI 模式以优化性能。

Arch Linux 在安装好以后，内核镜像默认没有载入 AHCI 驱动模块。修改 /etc/mkinitcpio.conf，添加ahci 到 MODULES 变量：

MODULES="ahci"

然后重建内核镜像，重新启动后 AHCI 驱动就会加载：

$ mkinitcpio -p linux

在主板 UEFI 或 BIOS 中，将 SATA 模式从 IDE（或 PATA Emulation 等等），设置为 AHCI（或 Native等等）。需要注意的是，如果你还在用 Windows XP，它需要安装 AHCI 驱动才行。Windows Vista 及以后的版本则不需要担心这个问题（但如果你是在 Windows 安装完成后才启用 AHCI 模式，因为安装期间 Windows 会自动禁用未使用的存储驱动程序，你需要参考 KB922976（Windows Vista/7）或KB2751461（Windows 8）来启用 AHCI 驱动程序）。

设置好以后，你可以从 dmesg 命令的输出里，找到 AHCI 和 NCQ 成功启用的证据：

$ dmesg
...
SCSI subsystem initialized
libata version 3.00 loaded.
ahci 0000:00:1f.2: version 3.0
ahci 0000:00:1f.2: irq 24 for MSI/MSI-X
ahci 0000:00:1f.2: AHCI 0001.0300 32 slots 6 ports 6 Gbps 0x10 impl SATA mode
ahci 0000:00:1f.2: flags: 64bit ncq led clo pio slum part ems apst
scsi host0: ahci
scsi host1: ahci
scsi host2: ahci
scsi host3: ahci
scsi host4: ahci
scsi host5: ahci
...
ata5.00: 976773168 sectors, multi 16: LBA48 NCQ (depth 31/32), AA
...


----------------------------

======================
终端透明

在.bashrc文件中加入以下文字即可，其中90的数值越小越透明：

if [ -n "$WINDOWID" ]; then
    TRANSPARENCY_HEX=$(printf 0x%x $((0xffffffff * 90 / 100)))
    xprop -id "$WINDOWID" -f _NET_WM_WINDOW_OPACITY 32c -set _NET_WM_WINDOW_OPACITY "$TRANSPARENCY_HEX"
fi
======================






